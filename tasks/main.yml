---

- name: Create a home for Helga.
  become: yes
  file: path={{ helga_home }}
        owner={{ ansible_ssh_user }}
        group={{ ansible_ssh_user }}
        state=directory
        recurse=yes

- name: Retrieve software requirements.
  become: yes
  apt: name={{ item }} state=present update_cache=yes
  with_items: '{{ helga_system_packages }}'

- include: enable_ssl.yml
  when: helga_use_ssl

- name: Create a virtualenv with latest pip and setuptools
  pip: name={{ item }}
       virtualenv={{ helga_home }}
       extra_args='--upgrade'
  with_items:
    - pip
    - setuptools

- name: Conceive the Helga From Pypi.
  pip: name={{ helga_pip_name }}
       virtualenv={{ helga_home }}
       version={{ helga_version|default(omit) }}
  tags:
    - helga_install
  when: helga_version is defined

- name: Pull Helga Source
  git: repo={{ helga_git_url }}
       dest={{ helga_source_dir }}
       accept_hostkey=yes
  when: helga_git_url

- name: Conceive the Helga From Source
  command: "{{ helga_home }}/bin/pip install {{ helga_source_dir }} --force-reinstall --upgrade"
  when: helga_source_dir

- name: Helga enhancements.
  pip: name={{ item.src }}
       state={{ item.state | default('present')}}
       virtualenv={{ helga_home }}
       version={{ item.version|default(omit) }}
  with_items: '{{ helga_external_plugins }}'
  notify: Wake up, Helga...

- name: Create settings directory
  file: path={{ helga_settings_path }}
        state=directory

- name: Install base personality.
  template: src=custom_settings.j2
            dest={{ helga_settings_path }}/00_base_settings.py

- name: Install personality customizations (files).
  copy: src={{ item }}
        dest={{ helga_settings_path }}
  with_fileglob:
    - files/helga/settings.d/*

- name: Custom settings, ASSEMBLE!
  assemble: src={{ helga_settings_path }}/
            dest={{ helga_home }}/bin/custom_settings.py
  notify: Wake up, Helga...

- include: supervisord.yml
